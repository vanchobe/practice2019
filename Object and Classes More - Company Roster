package com.vaniondabeat;

import java.io.File;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.SQLOutput;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class Main {
    static class Employee {
        String name;
        Double salary;
        String position;
        String department;
        String email;
        String age;

        public Employee(String name, Double salary, String position, String department, String email, String age) {
            this.name = name;
            this.salary = salary;
            this.position = position;
            this.department = department;
            this.email = email;
            this.age = age;
        }

        public Employee(String name, Double salary, String position, String department) {
            this(name, salary, position, department, "n/a", "-1");
            this.name = name;
            this.salary = salary;
            this.position = position;
            this.department = department;

        }

        public String getName() {
            return name;
        }

        public Double getSalary() {
            return salary;
        }

        public String getPosition() {
            return position;
        }

        public String getDepartment() {
            return department;
        }

        public String getEmail() {
            return email;
        }

        public String getAge() {
            return age;
        }

        @Override
        public String toString() {
            return String.format("%s %.2f %s %s", this.name, this.salary, this.email, this.age);
        }
    }


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());

        List<Employee> employes = new ArrayList<>();

        for (int i = 0; i < n; i++) {

            Employee myEployee = null;
            String[] tokens = scanner.nextLine().split(" ");
            String name = tokens[0];
            Double salary = Double.parseDouble(tokens[1]);
            String position = tokens[2];
            String department = tokens[3];
            if (tokens.length == 5) {
                String email = tokens[4];
                myEployee = new Employee(name, salary, position, department, email, "-1");
            } else if (tokens.length == 6) {
                String email = tokens[4];
                String age = tokens[5];
                myEployee = new Employee(name, salary, position, department, email, age);
            } else {
                myEployee = new Employee(name, salary, position, department, "n/a", "-1");

            }
            employes.add(myEployee);

        }
        Double bestSalary = 0.0;
        String bestDept = "";
        for (Employee employe : employes) {
            if (employe.getSalary() > bestSalary) {
                bestSalary = employe.getSalary();
                bestDept = employe.getDepartment();
            }
        }
        System.out.printf("%nHighest Average Salary: %s%n", bestDept);
//        for (Employee employe : employes) {
//            if (employe.getDepartment().equals(bestDept)) {
//                System.out.println(employe);
//            }
//
//
//        }
        int max = Integer.MIN_VALUE;
        employes.stream().sorted(
                (f, s) -> {
                    return s.getSalary().compareTo(f.getSalary());
                }

        ).forEach(e -> {
                    Double kon = 0.0;
                    String bestDepths = "";

            for (Employee employe : employes) {
                if (employe.getSalary() > kon) {
                    kon = employe.getSalary();
                    bestDepths = employe.getDepartment();

                }
            }


                    if (e.getDepartment().equals(bestDepths)) {
                        System.out.println(e.toString());

                    }

                }


        );

    }


}
