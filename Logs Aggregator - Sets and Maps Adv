package com.vaniondabeat;

import java.awt.image.AreaAveragingScaleFilter;
import java.lang.reflect.Array;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

public class Main {
    static class IpInfo {
        private Set<Integer> duration;
        private Set<String> ips;

        public IpInfo(Set<Integer> duration, Set<String> ips) {
            this.duration = duration;
            this.ips = ips;
        }

        public Set<Integer> getDuration() {
            return duration;
        }

        public Set<String> getIps() {
            return ips;
        }
    }

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);


        int n = Integer.parseInt(scanner.nextLine());

        // <IP> <user> <duration>

        Map<String, IpInfo> myMap = new TreeMap<>();

        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");

            String ip = input[0];
            String user = input[1];
            int duration = Integer.parseInt(input[2]);
            if (!myMap.containsKey(user)) {
                myMap.put(user, new IpInfo(new HashSet<>(), new TreeSet<>()));
                myMap.get(user).getDuration().add(duration);
                myMap.get(user).getIps().add(ip);
            } else {

                int currentDuration = myMap.get(user).getDuration().iterator().next();

                myMap.get(user).getDuration().clear();
                myMap.get(user).getDuration().add(duration + currentDuration);

                myMap.get(user).getIps().add(ip);

            }
        }
        final AtomicInteger indexHolder = new AtomicInteger();

        myMap.entrySet().stream().forEach(
                myEntry -> {
                    System.out.printf("%s: ", myEntry.getKey());
                    indexHolder.set(0);
                    myEntry.getValue().getDuration().stream().forEach(duration ->
                    {
                        System.out.printf("%d ", duration);

                    });
                    myEntry.getValue().getIps().stream().forEach(ip ->
                            {
                                final int index = indexHolder.getAndIncrement();
//
                                if (index == 0 && myEntry.getValue().getIps().size() != 1) {
                                    System.out.printf("[%s, ", ip);
                                } else if (index == myEntry.getValue().getIps().size() - 1 && myEntry.getValue().getIps().size() != 1) {
                                    System.out.printf("%s]%n", ip);

                                } else if(myEntry.getValue().getIps().size() == 1)  {
                                    System.out.printf("[%s]%n", ip);

                                } else  {
                                System.out.printf("%s, ", ip);

                            }
                            }

                    );
                }
        );

        System.out.println();
    }


}
