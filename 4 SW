package com.vaniondabeat;

import java.io.File;
import java.lang.reflect.Array;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.SQLOutput;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class Main {
    static class Dwarfes {
        String dwarfName;
        Integer dwarfPhysics;

        public String getDwarfName() {
            return dwarfName;
        }

        public Integer getDwarfPhysics() {
            return dwarfPhysics;
        }

        public Dwarfes(String dwarfName, Integer dwarfPhysics) {
            this.dwarfName = dwarfName;
            this.dwarfPhysics = dwarfPhysics;
        }
    }


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String input = scanner.nextLine();

        Map<String, List<Dwarfes>> dwarfs = new TreeMap<>();

        while (!input.contains("Once upon a time")) {

            if (input.contains("Once upon a time")) {
                break;
            }

            String[] tokens = input.split(" <:> ");
            String name = tokens[0];
            String hatColor = tokens[1];
            int physics = Integer.parseInt(tokens[2]);


            if (!dwarfs.containsKey(hatColor)) {
                dwarfs.put(hatColor, new ArrayList<>());
                dwarfs.get(hatColor).add(new Dwarfes(name, physics));

            } else {
                boolean isFound = false;
                int currentPhysics = 0;
                int index = 0;
                for (Map.Entry<String, List<Dwarfes>> entry : dwarfs.entrySet()) {
                    for (int i = 0; i < entry.getValue().size(); i++) {
                        if (entry.getValue().get(i).getDwarfName().equals(name) && entry.getKey().equals(hatColor)) {
                            currentPhysics = entry.getValue().get(i).getDwarfPhysics();
                            index = i;
                            isFound = true;
                            break;
                        }

                    }
                    if (isFound) {
                        break;

                    }
                }
                if (isFound && (!dwarfs.containsKey(hatColor))) {

                    dwarfs.get(hatColor).add(new Dwarfes(name, physics));
                }
                if (isFound && dwarfs.containsKey(hatColor)) {
                    if (physics > currentPhysics) {
                        dwarfs.get(hatColor).remove(index);
                        dwarfs.get(hatColor).add(new Dwarfes(name, physics));

                    }

                } else {
                    dwarfs.get(hatColor).add(new Dwarfes(name, physics));

                }
            }


            input = scanner.nextLine();

        }
        dwarfs.entrySet().stream().sorted(


                (f, s) -> {
                    int result = 0;
                    if (f.getValue().size() % 2 != 0) {
                        for (int i = 0; i < f.getValue().size(); i++) {
                            result = s.getValue().get(i).getDwarfPhysics().compareTo(f.getValue().get(i).dwarfPhysics);
                        }
                    } else {
                        for (int i = 0; i < f.getValue().size()-1; i++) {
                            result = s.getValue().get(i).getDwarfPhysics().compareTo(f.getValue().get(i).dwarfPhysics);
                        }

                    }

                    if (result == 0) {
                        result = f.getKey().compareTo(s.getKey());
                    }

                    return result;

                }


        ).forEach(entry ->
                {


                    entry.getValue().stream().sorted(
                            (c, l) -> {
                                int result = l.getDwarfPhysics().compareTo(c.getDwarfPhysics());
                                if (result == 0) {
                                    result = l.getDwarfName().compareTo(c.getDwarfName());
                                }
                                return result;

                            }

                    ).forEach(c ->
                            {
                                System.out.printf("(%s) %s <-> %d%n", entry.getKey(), c.getDwarfName(), c.getDwarfPhysics());
                            }
                    );
                }
        );


    }


}
